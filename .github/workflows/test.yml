
name: Testing change 

on:
  push: 
    branches: [ main ]
#  pull_request:
#    branches: [ main ]
#    types: [labeled, unlabeled]

jobs: 
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: run
        run: |
         echo "
         #FROM tiangolo/uvicorn-gunicorn:python3.8
         FROM python:3.8
         RUN apt-get update -y
         RUN apt-get install -y build-essential libzbar-dev
         COPY requirements.txt requirements.txt
         RUN pip3 install -r requirements.txt 
         #COPY requirements.txt code/common_functionalities/
         #COPY utility code/vcs/
         #WORKDIR code/vcs/
         #RUN pip3 install -r requirements.txt
         RUN chown 1000:1000 ./
         USER 1000
         CMD ["python3","manage.py","runserver","--settings=nsl_vcs.settings.docker","0.0.0.0:7013"]" >> Dockerfile
         echo "
         pyqrcode
         python-barcode
         pyzbar
         pypng
         pillow
         boto3==1.11.9
         botocore==1.14.9
         zipp==0.6.0
         pika==1.1.0
         rabbitpy
         django-rest-swagger==2.1.2
         djangorestframework==3.9.2
         Django==2.1" >> requirements.txt 
         cat requirements.txt
         cat Dockerfile      
      -
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      -
        name: Build
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64/v8 \
            --output "type=image,push=false" \
            --tag test:latest \
            --file Dockerfile ./
#          docker build . # will run buildx

#        name: Set up Docker Buildx
#        uses: crazy-max/ghaction-docker-buildx@v3
#      -
#        name: Cache Docker layers
#        uses: actions/cache@v2
#        id: cache
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-


#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install flake8 pytest
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#  if: ${{ contains( join(github.event.pull_request.labels.*.name, ', '), 'STAGE') }}
#      - name: Step 1 - MainBranch Checkout
#        uses: actions/checkout@v2
     
#      - name: Step 2 - JDK SETUP
#        uses: actions/setup-java@v2
#        with:
#          java-version: '15'
#          distribution: 'adopt'      
#      
#      - name: Set up Maven
#        uses: stCarolas/setup-maven@v4
#        with:
#            maven-version: 3.8.1 
#      - name: Install packcli
#        run: |
#            sudo add-apt-repository ppa:cncf-buildpacks/pack-cli
#            sudo apt-get update
#            sudo apt-get install pack-cli
      
#      - name: Build
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run : |
#          mvn clean install
#          mvn -B sonar:sonar  -Dsonar.branch.name=main -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=asish-test -Dsonar.projectKey=asish-test  -Dsonar.projectName=asish-test  -Dsonar.language=java  -Dsonar.sources=src/main/java -Dsonar.java.binaries=target/classes -Dsonar.tests=src/test/java  -Dsonar.dynamicAnalysis=reuseReports  -Dsonar.junit.reportsPath=/target/test-reports  -Dsonar.java.coveragePlugin=jacoco  -Dsonar.jacoco.reportPath=/target/site/jacoco/index.html  
#          docker images
#          mvn compile com.google.cloud.tools:jib-maven-plugin:3.0.0:dockerBuild
#          docker images
          
#      - name: Buildpacks Build
#        run: | 
#          pack build api/nsl-iam:latest --builder paketobuildpacks/builder:base --buildpack gcr.io/paketo-buildpacks/maven:latest
     
#      - name: Step 3 - Get Info
#        run: |
#          project_dir=$(pwd)
#          mkdir TEST
#          echo Hello
#          cd ~/.m2
#          ls -la
      
#      - name: Set up a cache for Maven
#        uses: actions/cache@v2
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2 
         
         
#      - name: configuring settings.xml 
#        run: |
#            cd ~/.m2
#            ls -la
#            cat settings.xml
#            sed -i 's#${env.GITHUB_ACTOR}#AsishVenkataSai#' settings.xml
#            sed -i 's#${env.GITHUB_TOKEN}#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#' settings.xml
#            sed -i 's#<servers>#<activeProfiles><activeProfile>github</activeProfile></activeProfiles><profiles><profile><repositories><repository><id>github</id><url>https://maven.pkg.github.com/asishvenkatasai/docker-test</url><snapshots><enabled>true</enabled></snapshots></repository></repositories></profile></profiles><servers>#' settings.xml

#            cat settings.xml  
#      - name: maven build
#        run: |
#          mvn clean install 
#          echo "----------------------------------------------------------------------------------------------------------------------------------"
#          mvn deploy
#            mvn install deploy -P github -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/asishvenkatasai/docker-test
#      - name: Install packcli
#        run: |
#            sudo add-apt-repository ppa:cncf-buildpacks/pack-cli 
#            sudo apt-get update
#            sudo apt-get install pack-cli
#            
#      - name: Buildpack download    
#        run: git clone https://github.com/GoogleCloudPlatform/buildpack-samples.git
#
#      - name: Build and image with builpack
#        run: |
#            pack build buildpacks-test:latest --builder gcr.io/buildpacks/builder:v1
#            docker images
      
#      - name: clone test
#        run: |
#           ls -la
#           cd api
#           make configure USERNAME=asishvenkatasai MAILID=ashish.kannekanti@nslhub.com
#           make build BRANCH=developer PROJECT=${PWD##*/}        
#           make copy PROJECT=${PWD##*/}
      
#      - name: Test
#        run: |
#           mkdir test
#          pwd 
#           tree -f
#      - name: Check out my other private repo
#        uses: actions/checkout@master
#        with:
#         repository: AsishVenakataSai/Test
#          ref: TEST
          #AsishVenakataSai/Docker-Test-With-Dependent-Jar
#          token: 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
#          path: $GITHUB_WORKSPACE/test
#      - name: Clone
#        run: |
#           pwd 
#           tree -f
        #  ls -la
        #  ls ..
        #  cd ../docker-test
        #  ls
        #  cd api
        #  make build
        #  ls ..
        #  ls .git
        #  make clone
        #  make build
        #  make clean
      
            
     # - name: populate previous jar
     #   run: cp  $project_dir/lib/*.jar ~/.m2
        
      #- name: Step 4 - Build with Maven
      #  run: mvn -B package --file pom.xml 
    ##  - name: Install pack CLI via apt. See https://buildpacks.io/docs/tools/pack/#pack-cli
    ##    run: |
    ##      sudo add-apt-repository ppa:cncf-buildpacks/pack-cli
    ##      sudo apt-get update
    ##     sudo apt-get install pack-cli

    ##  - name: Build app with pack CLI
    ##    run: pack build spring-boot-buildpack --path . --builder paketobuildpacks/builder:base    
          
    ##  - name: Docker images list
    ##    run: |
    ##      docker images
          
    ##  - name: Step 5 - Set up a cache for Maven
    ##    uses: actions/cache@v2
    ##    with:
    ##     path: ~/.m2
    ##     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    ##    restore-keys: ${{ runner.os }}-m2 
         
    ##  - name: Step 6 - Build with Maven using cache
    ##    run: mvn -B package --file pom.xml   
         
      #- name: Step 7 - Build the Docker image
      #  run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)   

     ## - name: Configure AWS credentials
     ##   uses: aws-actions/configure-aws-credentials@v1
     ##   with:
     ##     aws-access-key-id: ASIA27Z34IUCP2AE5HQG
     ##     aws-secret-access-key: v8ppnuRnuEhL0ojyTC1V9T914PbOn+xkOAEBW/o0
     ##     aws-session-token: IQoJb3JpZ2luX2VjEKr//////////wEaCXVzLWVhc3QtMSJGMEQCIB1HvdgoGUm0pLWAz9dU8NKbhNUOdpN3hd4pKOEX0Wx3AiA2TeUqFmxwStQ1QdMIHG1xIpe3/gRwPbw40/0A/YYpOCqiAwhDEAAaDDc1NTUwMjk1NzgyOCIMCMQ7SmGZWZyfUzpxKv8CNm3dw92IpImAmtxZqUyZPAjRpVPN0F09UjHUk0/L/TfVN3H6HiBS/eGv3AA56X6ME3EsmsaeAy/ztdLAh+tueBjFd1vl0L58Vi3rt+g+j5r18Vc1jM06MMIwdi2uFAB1aOh42Kn5oHogUoHevHeDdxH6MMRDtc4TRR7pdWj6zYQnrvYbmsYxmRHEviteD+ZX1qjY73YbXm2E+hlBKOtbu2IHzdGNjEkWjR2AuwZFTE2i+edl6ihJqhHHK8ojcKLgW3h3JUp+1X1C7CbshboUz8Sjm6n6AjhPQw+ku7Fye/sXeEKabsDncrMhCYpKffgog+fvqoNyIpmOUd39Z7uvaIKVKO+xz9kouCbsg5ei9Bdfaeei+wJDvGHizjnXccYhCt0wyI4mD5hAzVIR0DGMSj0nj4pD92cCwCtZT2qSuI5l/O02K9aroG5FN6FZVBa4rIrb0VdbDIKtAxfGG1+Cvp2bCRX05MTjgU6BYbpzyBTwvSit6CMQYBwWbOT64y4w3/mIhQY6pwEQb7lcKsh5AYAT+OKQLJCo3k2skArQafDoEDEUAunvZe28DLV2s9j6KqOAh5U2PM8CVaermneZ+O0rCblw/5q+exFZgFdSdD+Ksx2vkRMBnB3I9wKTN16bdC2RkAN+OL3SIBwizeSdMs+UtIzjAAXdDGCLSi1r4GjmDYJcpRcy6vqP58JPFna1turUs41FbcXX5gWHWxFEWCZ1ucvzLhgb3GYeG4zFaA==
     ##     aws-region: ap-south-1

     ## - name: Login to Amazon ECR
     ##   id: login-ecr
     ##   uses: aws-actions/amazon-ecr-login@v1
        
     ## - name: Build, tag, and push image to amazon ECR
     ##   env:
     ##     ECR_REGISTRY: 755502957828.dkr.ecr.ap-south-1.amazonaws.com
     ##     ECR_REPOSITORY: hello-world
     ##     IMAGE_TAG: ${{ github.sha }}
     ##   run: |
     ##     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
     ##     docker push $ECR_REGISTRY/$ECR_REPOSITORY
     ##     docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
     ##     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

     ## - name: Logout of amazon ECR
     ##   if: always()
     ##   run: docker logout ${{ steps.login-ecr.outputs.registry }}  
     
     # - name: Build and run unit tests with Buildpack CI
     #   uses: buildpack-ci/run-tests@v1

     # - name: buildpacks setup-pack
     #   uses: buildpacks/github-actions/setup-pack@v4.1.0
     # - name: buildpacks package
     #   run: |
     #     #!/usr/bin/env bash
     #     set -euo pipefail
     #     BP_ID="$(cat buildpack.toml | yj -t | jq -r .buildpack.id)"
     #     VERSION="$(cat buildpack.toml | yj -t | jq -r .buildpack.version)"
     #     PACKAGE="${REPO}/$(echo "$BP_ID" | sed 's/\//_/g')"
     #     pack buildpack package --publish ${PACKAGE}:${VERSION}
     #     DIGEST="$(crane digest ${PACKAGE}:${VERSION})"
     #     echo "::set-output name=bp_id::$BP_ID"
     #     echo "::set-output name=version::$VERSION"
     #     echo "::set-output name=address::${PACKAGE}@${DIGEST}"        
     #   shell: bash  
     #   

          
     # - name: Step 8 - Upload image to ECR
     #   uses: appleboy/docker-ecr-action@master
     #   with:
     #     access_key: ASIA27Z34IUCA3VWD6UC
     #     secret_key: mGS597qKtVLlwl9/Sh3sj8Vv0DMl2Hd3gZIiCcfq
     #     repo: docker-test
     #     region: ap-south-1
     #     registry: 755502957828.dkr.ecr.ap-south-1.amazonaws.com

          
